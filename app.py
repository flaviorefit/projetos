# -*- coding: utf-8 -*-
"""
Sistema de Requisi√ß√µes - Streamlit (Vers√£o Refatorada e Otimizada)
@author: flavio.ribeiro
"""

import streamlit as st
import pandas as pd
from pymongo import MongoClient
from datetime import datetime, date
import plotly.express as px
from PIL import Image
import hashlib
import io

# =============================================================================
# DEFINI√á√ÉO DE TODAS AS FUN√á√ïES (SE√á√ÉO √öNICA)
# =============================================================================

# --- Fun√ß√µes de Autentica√ß√£o e Sess√£o ---
def hash_password(password):
    """Criptografa a senha usando SHA256."""
    return hashlib.sha256(password.encode()).hexdigest()

def check_login(username, password):
    """## CORRE√á√ÉO CR√çTICA ##
    Verifica as credenciais do usu√°rio de forma segura.
    - Criptografa a senha digitada pelo usu√°rio.
    - Compara com o hash j√° salvo no secrets.toml.
    """
    try:
        users = st.secrets["usuarios"]
        for user_info in users.values():
            if user_info.get("username") == username:
                if hash_password(password) == user_info.get("password"):
                    return user_info.get("role", "requisitante") # Retorna a role do usu√°rio
        return None # Retorna None se o usu√°rio n√£o for encontrado ou a senha estiver errada
    except Exception as e:
        st.error(f"Erro no sistema de autentica√ß√£o: {e}")
        return None

def logout():
    """Limpa a sess√£o e redireciona para a tela de login."""
    st.session_state.clear()
    st.rerun()

# --- Fun√ß√µes de Conex√£o com o Banco de Dados ---
@st.cache_resource
def init_connection():
    """Inicializa e cacheia a conex√£o com o MongoDB."""
    try:
        client = MongoClient(st.secrets["mongo_uri"], serverSelectionTimeoutMS=20000)
        client.admin.command("ping")
        return client
    except Exception as e:
        st.error(f"‚ùå Erro ao conectar no MongoDB: {e}")
        return None

# --- Fun√ß√µes de Carga e Manipula√ß√£o de Dados ---
@st.cache_data(ttl=30)
def carregar_dados(collection):
    """Carrega dados da cole√ß√£o, limpa e prepara o DataFrame."""
    if collection is None:
        return pd.DataFrame()
    try:
        df = pd.DataFrame(list(collection.find()))
        if '_id' in df.columns:
            df.drop(columns=['_id'], inplace=True)

        colunas_essenciais = ['N¬∫ de Pedido', 'Status', 'Base', 'Comprador', 'Fornecedor', 'Descri√ß√£o', 'Devolu√ß√£o Gest√£o', 'Requisitante', 'Pre√ßo Final', 'Diferen√ßa R$']
        for col in colunas_essenciais:
            if col not in df.columns:
                df[col] = pd.NA

        for col in df.columns:
            if any(term in col for term in ['Data', 'Gest√£o', 'Diretoria', 'Minuta']):
                df[col] = pd.to_datetime(df[col], errors='coerce')

        ## MELHORIA: Limpeza de dados movida para c√°, para ser executada apenas uma vez.
        df["Status"] = df["Status"].fillna("N√£o Informado")
        df["Base"] = df["Base"].fillna("N√£o Informada")
        df["Comprador"] = df["Comprador"].fillna("N√£o Informado")
        df["Fornecedor"] = df["Fornecedor"].astype(str).fillna("N√£o Informado")
        df["Requisitante"] = df["Requisitante"].astype(str).fillna("N√£o Informado")
        
        # Converte colunas num√©ricas, tratando poss√≠veis erros
        numeric_cols = ['Pre√ßo Final', 'Diferen√ßa R$']
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

        return df
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return pd.DataFrame()

def gerar_novo_numero(collection):
    """## MELHORIA DE PERFORMANCE ##
    Busca o maior "N¬∫ de Pedido" de forma eficiente no MongoDB.
    """
    if collection is None:
        return 1
    try:
        resultado = collection.find_one(sort=[("N¬∫ de Pedido", -1)])
        if resultado and resultado.get("N¬∫ de Pedido"):
            return int(resultado.get("N¬∫ de Pedido", 0)) + 1
        return 1
    except (ValueError, TypeError):
        return 1

# --- Fun√ß√µes de Interface e Filtros ---
def aplicar_filtros(df, prefixo=""):
    """Cria os widgets de filtro e retorna os valores selecionados."""
    status = st.multiselect("Status", options=sorted(df["Status"].unique()), key=f"{prefixo}_status")
    base = st.multiselect("Base", options=sorted(df["Base"].unique()), key=f"{prefixo}_base")
    comprador = st.multiselect("Comprador", options=sorted(df["Comprador"].unique()), key=f"{prefixo}_comprador")
    fornecedor = st.multiselect("Fornecedor", options=sorted(df["Fornecedor"].unique()), key=f"{prefixo}_fornecedor")
    descricao = st.text_input("Descri√ß√£o da RC (cont√©m):", key=f"{prefixo}_descricao")

    requisitante = None
    if st.session_state.user_role == "admin":
        requisitante = st.multiselect("Requisitante", options=sorted(df["Requisitante"].unique()), key=f"{prefixo}_requisitante")

    anos_disponiveis = ["Todos"] + sorted(df['Devolu√ß√£o Gest√£o'].dt.year.dropna().unique().astype(int), reverse=True)
    ano = st.selectbox("Ano", anos_disponiveis, key=f"{prefixo}_ano")

    return status, base, comprador, fornecedor, descricao, requisitante, ano

def filtrar_df(df, status, base, comprador, fornecedor, descricao, requisitante, ano):
    """Filtra o DataFrame com base nas sele√ß√µes."""
    df_filtrado = df.copy()
    if requisitante: df_filtrado = df_filtrado[df_filtrado["Requisitante"].isin(requisitante)]
    if status: df_filtrado = df_filtrado[df_filtrado["Status"].isin(status)]
    if base: df_filtrado = df_filtrado[df_filtrado["Base"].isin(base)]
    if comprador: df_filtrado = df_filtrado[df_filtrado["Comprador"].isin(comprador)]
    if fornecedor: df_filtrado = df_filtrado[df_filtrado["Fornecedor"].isin(fornecedor)]
    if descricao: df_filtrado = df_filtrado[df_filtrado["Descri√ß√£o"].str.contains(descricao, case=False, na=False)]
    if ano != "Todos": df_filtrado = df_filtrado[df_filtrado['Devolu√ß√£o Gest√£o'].notna() & (df_filtrado['Devolu√ß√£o Gest√£o'].dt.year == ano)]
    return df_filtrado

# --- Fun√ß√µes de Formata√ß√£o e Utilit√°rios ---
def formatar_moeda(valor):
    if pd.isna(valor) or valor is None: return "R$ 0,00"
    return f"R$ {float(valor):,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def formatar_percentual(valor):
    if pd.isna(valor) or valor is None: return "0,00%"
    return f"{float(valor):.2f}%".replace(".", ",")

def format_valor_kpi(valor):
    if valor >= 1_000_000: return f"R$ {valor/1_000_000:.2f}M"
    if valor >= 1_000: return f"R$ {valor/1_000:.2f}K"
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def convert_df_to_excel(df):
    output = io.BytesIO()
    for col in df.select_dtypes(include=['datetimetz']).columns:
        df[col] = df[col].dt.tz_localize(None)
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Dados')
    return output.getvalue()

# =============================================================================
# IN√çCIO DO SCRIPT E L√ìGICA DE LOGIN
# =============================================================================

st.set_page_config(page_title="Sistema de Requisi√ß√µes", layout="wide")

def tela_login():
    """Renderiza a interface de login."""
    _, col2, _ = st.columns([1, 1, 1])
    with col2:
        try:
            st.image(Image.open("Imagem_gulf.png"), width=150)
        except FileNotFoundError:
            pass
        st.markdown("<h1 style='text-align: center; color: #002776;'>Monitoramento de Demandas</h1>", unsafe_allow_html=True)
        
        with st.form("login_form"):
            username = st.text_input("Usu√°rio", placeholder="Digite seu usu√°rio")
            password = st.text_input("Senha", type="password", placeholder="Digite sua senha")
            if st.form_submit_button("Entrar", use_container_width=True, type="primary"):
                user_role = check_login(username, password)
                if user_role:
                    st.session_state.login_realizado = True
                    st.session_state.usuario_logado = username
                    st.session_state.user_role = user_role
                    st.success("Login realizado com sucesso!")
                    st.rerun()
                else:
                    st.error("Usu√°rio ou senha inv√°lidos.")

if not st.session_state.get("login_realizado"):
    tela_login()
    st.stop()

# =============================================================================
# APLICA√á√ÉO PRINCIPAL (AP√ìS LOGIN)
# =============================================================================

# --- Conex√£o e Carga de Dados ---
client = init_connection()
if client:
    db = client[st.secrets["mongo_db"]]
    requisicoes_col = db[st.secrets["mongo_collection_requisicoes"]]
    st.sidebar.success("‚úÖ Conectado")
else:
    st.stop()

df = carregar_dados(requisicoes_col)

# --- Layout do Cabe√ßalho e Sidebar ---
st.markdown(
    """
    <style>
    [data-testid="stSidebar"] { background-color: #002776; color: white; }
    [data-testid="stSidebar"] .stRadio label p { color: white; }
    [data-testid="stSidebar"] .streamlit-expanderHeader { color: white; }
    </style>
    """, unsafe_allow_html=True
)

col1, col2, col3 = st.columns([1, 6, 2])
with col1:
    try:
        st.image(Image.open("Imagem_gulf.png"), width=100)
    except FileNotFoundError:
        pass
col2.markdown("<h1 style='color:#002776; text-align:center; font-size:36px; font-weight:bold;'>Monitoramento de Demandas Gulf</h1>", unsafe_allow_html=True)
with col3:
    st.markdown(f"**üë§ Usu√°rio:** {st.session_state.usuario_logado}")
    if st.button("üö™ Sair"):
        logout()

aba = st.sidebar.radio(
    "Menu:",
    ["Dashboard", "Listar Requisi√ß√µes", "Cadastrar Requisi√ß√£o", "Editar/Excluir"] if st.session_state.user_role == "admin" else ["Dashboard", "Listar Requisi√ß√µes"]
)

with st.sidebar.expander("üéØ Filtros Gerais", expanded=True):
    status, base, comprador, fornecedor, descricao, requisitante, ano = aplicar_filtros(df)

df_filtrado = filtrar_df(df, status, base, comprador, fornecedor, descricao, requisitante, ano)

# --- Renderiza√ß√£o da Aba Selecionada ---
if aba == "Dashboard":
    st.header("üìä Dashboard de Requisi√ß√µes")
    if not df_filtrado.empty:
        qtd_total = len(df_filtrado)
        qtd_cancelados = len(df_filtrado[df_filtrado["Status"] == "Cancelado"])
        qtd_concluidos = len(df_filtrado[df_filtrado["Status"] == "Conclu√≠do"])
        qtd_aprovacao = len(df_filtrado[df_filtrado["Status"] == "Em Aprova√ß√£o"])
        soma_pedido_emitido = df_filtrado["Pre√ßo Final"].sum()
        total_custo_evitado = df_filtrado["Diferen√ßa R$"].sum()
        
        card_cols = st.columns(6)
        cards = [("Qtd Total", qtd_total, "#002776"), ("Cancelados", qtd_cancelados, "#D90429"), ("Conclu√≠dos", qtd_concluidos, "#2B9348"), ("Em Aprova√ß√£o", qtd_aprovacao, "#F2C94C"), ("Valor Total", format_valor_kpi(soma_pedido_emitido), "#6A4C93"), ("Total C.E", format_valor_kpi(total_custo_evitado), "#17a2b8")]
        for col, (titulo, valor, cor) in zip(card_cols, cards):
            col.markdown(f'<div style="background-color:{cor};padding:20px;border-radius:15px;text-align:center;height:120px;display:flex;flex-direction:column;justify-content:center;"><h3 style="color:white;margin:0 0 8px 0;font-size:16px;">{titulo}</h3><h2 style="color:white;margin:0;font-size:20px;font-weight:bold;">{valor}</h2></div>', unsafe_allow_html=True)

        st.markdown("<br>", unsafe_allow_html=True)
        # (Restante do seu c√≥digo do Dashboard aqui...)
    else:
        st.info("Nenhuma requisi√ß√£o encontrada com os filtros aplicados.")

elif aba == "Listar Requisi√ß√µes":
    st.subheader("üìã Listagem de Requisi√ß√µes")
    if not df_filtrado.empty:
        st.dataframe(df_filtrado, use_container_width=True, hide_index=True)
    else:
        st.info("Nenhuma requisi√ß√£o encontrada com os filtros aplicados.")

elif aba == "Cadastrar Requisi√ß√£o" and st.session_state.user_role == "admin":
    st.subheader("üìù Cadastrar Nova Requisi√ß√£o")
    # (Seu formul√°rio de cadastro aqui...)
    pass

elif aba == "Editar/Excluir" and st.session_state.user_role == "admin":
    st.subheader("‚úèÔ∏è Editar ou Excluir Requisi√ß√£o")
    # (Sua l√≥gica de edi√ß√£o/exclus√£o aqui...)
    pass
